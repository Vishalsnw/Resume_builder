# .github/workflows/auto-fix-imports.yml

name: Auto-Fix Imports

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to create PR against'
        required: true
        default: 'main'

jobs:
  fix-imports:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Create branch for changes
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git checkout -b fix-import-conflicts-$(date +%s)
          
      - name: Run import fixer script
        run: |
          python -c "
import os
import re

SRC_DIR = os.getcwd()
IMPORT_ALIAS = '@/'

def find_all_exports(base_dirs):
    exports = {}
    for base in base_dirs:
        for root, _, files in os.walk(os.path.join(SRC_DIR, base)):
            for file in files:
                if file.endswith(('.tsx', '.ts', '.js', '.jsx')):
                    name = file.rsplit('.', 1)[0]
                    path = os.path.relpath(os.path.join(root, file), SRC_DIR).replace('\\\\', '/')
                    path_no_ext = os.path.splitext(path)[0]
                    exports[name] = path_no_ext
    return exports

def get_imported_items(text):
    # Get all imported items, including renamed imports
    direct_imports = re.findall(r'import\\s+(\\w+)', text)
    renamed_imports = re.findall(r'import\\s+{[^}]*\\s+(\\w+)\\s+as\\s+(\\w+)[^}]*}', text)
    return set(direct_imports + [alias for _, alias in renamed_imports])

def get_local_declarations(text):
    # Find component declarations (const X =, function X, class X)
    const_declarations = re.findall(r'(?:const|let|var)\\s+(\\w+)\\s*[:=]', text)
    func_declarations = re.findall(r'function\\s+(\\w+)', text)
    class_declarations = re.findall(r'class\\s+(\\w+)', text)
    interface_declarations = re.findall(r'(?:interface|type|enum)\\s+(\\w+)', text)
    
    return set(const_declarations + func_declarations + class_declarations + interface_declarations)

def get_used_items(text, known_items):
    used = set()
    for item in known_items:
        # Match tags <ComponentName or usage like ComponentName(...)
        if re.search(rf'\\b{item}\\b', text):
            used.add(item)
    return used

def add_imports(filepath, missing, exports, local_declarations):
    with open(filepath, 'r', encoding='utf-8') as f:
        lines = f.readlines()

    insert_at = next((i for i, line in enumerate(lines)
                      if line.strip() and not line.strip().startswith(('//', '/*', '*'))), 0)
    
    import_lines = []
    skipped = []
    
    for item in missing:
        if item in local_declarations:
            # Naming conflict detected, use an alias
            alias = f'{item}Import'
            import_lines.append(f\"import {{ default as {alias} }} from '{IMPORT_ALIAS}{exports[item]}';\n\")
            skipped.append(f\"{item} (imported as {alias} to avoid conflict)\")
        else:
            import_lines.append(f\"import {item} from '{IMPORT_ALIAS}{exports[item]}';\n\")
    
    if skipped:
        import_lines.append(f\"\\n// NOTE: The following imports were renamed to avoid conflicts with local declarations:\\n\")
        import_lines.append(f\"// {', '.join(skipped)}\\n\")

    updated = lines[:insert_at] + import_lines + lines[insert_at:]
    with open(filepath, 'w', encoding='utf-8') as f:
        f.writelines(updated)
    
    return skipped

def is_code_file(filename):
    return filename.endswith(('.tsx', '.ts', '.js', '.jsx'))

def main():
    base_dirs = ['components', 'hooks', 'utils', 'contexts', 'services', 'types']
    exports = find_all_exports(base_dirs)
    print(f\"🧠 Found {len(exports)} exportable items in: {', '.join(base_dirs)}\")

    total = 0
    updated = 0
    all_used = set()
    conflicts = []

    for root, _, files in os.walk(SRC_DIR):
        for file in files:
            if not is_code_file(file):
                continue

            filepath = os.path.join(root, file)
            with open(filepath, 'r', encoding='utf-8') as f:
                text = f.read()

            imported = get_imported_items(text)
            local_declarations = get_local_declarations(text)
            used = get_used_items(text, exports.keys())
            all_used.update(used)

            missing = used - imported
            if missing:
                print(f\"🔧 Updating {filepath} - adding: {', '.join(missing)}\")
                skipped = add_imports(filepath, missing, exports, local_declarations)
                if skipped:
                    conflicts.extend([f\"{filepath}: {s}\" for s in skipped])
                updated += 1

            total += 1

    # Unused component warning
    unused = set(exports.keys()) - all_used
    if unused:
        print(\"\\n⚠️ Possibly unused files/components:\")
        for u in sorted(unused):
            print(f\"  - {u} → {exports[u]}\")
    
    if conflicts:
        print(\"\\n⚠️ Naming conflicts detected and handled:\")
        for conflict in conflicts:
            print(f\"  - {conflict}\")

    print(f\"\\n✅ Done: Processed {total} files, updated {updated} files.\")

if __name__ == \"__main__\":
    main()
          "
          
      - name: Check for changes
        id: check_changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Commit and push changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git add .
          git commit -m "Fix import conflicts automatically"
          git push origin HEAD
          
      - name: Create Pull Request
        if: steps.check_changes.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: Fix import conflicts
          title: 'Fix Component Import Conflicts'
          body: |
            This PR fixes component import conflicts by detecting local declarations and using aliases where needed.
            
            Changes were made automatically by the import-fixer script.
          branch: ${{ github.ref }}
          base: ${{ github.event.inputs.branch }}
          labels: automated-pr, import-fixes
